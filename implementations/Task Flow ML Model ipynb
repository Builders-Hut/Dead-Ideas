{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7d8dac0-64bd-4e84-acc6-1c8cfd9e00b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing Freelancer 1...\n",
      "Skill Match Scores: {'Easy EDA': 50, 'Electronics': 50, 'Schematics Design': 0, 'Circuit Analysis': 50}\n",
      "Final Skill Match Score: 85.0%\n",
      "\n",
      "Processing Freelancer 2...\n",
      "Skill Match Scores: {'Easy EDA': 50, 'Electronics': 50, 'Schematics Design': 0, 'Circuit Analysis': 50}\n",
      "Final Skill Match Score: 65.0%\n",
      "\n",
      "Processing Freelancer 3...\n",
      "Skill Match Scores: {'Easy EDA': 50, 'Electronics': 50, 'Schematics Design': 0, 'Circuit Analysis': 0}\n",
      "Final Skill Match Score: 60.0%\n",
      "\n",
      "Freelancer Rankings (Top to Bottom):\n",
      "1. Freelancer 3 (Score: 60.0%)\n",
      "2. Freelancer 2 (Score: 65.0%)\n",
      "3. Freelancer 1 (Score: 85.0%)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\Charumathi\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "import re\n",
    "\n",
    "# Download NLTK resources\n",
    "nltk.download('stopwords')\n",
    "\n",
    "# Define skills and client requirements\n",
    "skills = [\"Easy EDA\", \"Electronics\", \"Schematics Design\", \"Circuit Analysis\"]\n",
    "\n",
    "# Example profiles of freelancers (newcomers and experienced)\n",
    "freelancer_profiles = [\n",
    "    {\n",
    "        \"name\": \"Freelancer 1\",\n",
    "        \"profile\": \"Trained in electronics. Completed a course in EasyEDA. Worked on basic PCB designs and circuit analysis.\",\n",
    "        \"experience\": \"newcomer\"\n",
    "    },\n",
    "    {\n",
    "        \"name\": \"Freelancer 2\",\n",
    "        \"profile\": \"Experienced in electronics and circuit analysis. Designed multiple PCBs using EasyEDA.\",\n",
    "        \"experience\": \"experienced\"\n",
    "    },\n",
    "    {\n",
    "        \"name\": \"Freelancer 3\",\n",
    "        \"profile\": \"New to electronics but interested in learning. Took a course in EasyEDA. No real PCB experience yet.\",\n",
    "        \"experience\": \"newcomer\"\n",
    "    }\n",
    "]\n",
    "\n",
    "# Define client requirements\n",
    "client_requirements = {\n",
    "    \"Easy EDA\": \"EasyEDA, PCB design with EasyEDA\",\n",
    "    \"Electronics\": \"Electronics, electrical engineering, circuit design\",\n",
    "    \"Schematics Design\": \"schematics design, circuit diagram design\",\n",
    "    \"Circuit Analysis\": \"circuit analysis, signal integrity\"\n",
    "}\n",
    "\n",
    "# Function to preprocess and clean text\n",
    "def preprocess_text(text):\n",
    "    # Convert to lowercase\n",
    "    text = text.lower()\n",
    "    # Remove stopwords\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    words = re.sub(r'[^\\w\\s]', '', text).split()  # Remove punctuation and split into words\n",
    "    cleaned_text = \" \".join([word for word in words if word not in stop_words])\n",
    "    return cleaned_text\n",
    "\n",
    "# Function to calculate match score for freelancer profile\n",
    "def calculate_skill_match(freelancer_profile, client_requirements, skills):\n",
    "    profile_text = preprocess_text(freelancer_profile['profile'])\n",
    "    match_scores = {}\n",
    "    \n",
    "    for skill in skills:\n",
    "        # Check if the skill is directly mentioned in the profile\n",
    "        skill_keywords = client_requirements.get(skill, \"\").lower().split(\", \")\n",
    "        \n",
    "        score = 0\n",
    "        for keyword in skill_keywords:\n",
    "            if keyword in profile_text:\n",
    "                score += 50  # Partial match\n",
    "            else:\n",
    "                score += 0  # No match\n",
    "        \n",
    "        # Normalize to 100\n",
    "        match_scores[skill] = min(100, score)  # Maximum 100 for exact match\n",
    "        \n",
    "    return match_scores\n",
    "\n",
    "# Function to calculate final match score for freelancer\n",
    "def calculate_final_score(match_scores, experience):\n",
    "    total_score = sum(match_scores.values())\n",
    "    final_score = total_score / len(match_scores)\n",
    "    \n",
    "    # Calculate potential and task match context\n",
    "    potential = final_score  # Directly proportional to the skill match\n",
    "    task_match_context = 0  # Task match context (inverse of experience: higher experience, lower rank)\n",
    "    \n",
    "    # Task match context is higher for experienced freelancers\n",
    "    if experience == \"experienced\":\n",
    "        task_match_context = -10  # Inverse proportional, lowers experienced freelancer's rank\n",
    "    elif experience == \"newcomer\":\n",
    "        task_match_context = 10  # Boosts newcomer rank\n",
    "    \n",
    "    # Apply potential and task match context to final score\n",
    "    final_score += potential + task_match_context\n",
    "    \n",
    "    # Ensure the final score doesn't exceed 100%\n",
    "    return min(100, final_score)\n",
    "\n",
    "# Processing freelancer profiles\n",
    "freelancer_scores = []\n",
    "\n",
    "for freelancer in freelancer_profiles:\n",
    "    print(f\"Processing {freelancer['name']}...\")\n",
    "    \n",
    "    match_scores = calculate_skill_match(freelancer, client_requirements, skills)\n",
    "    final_score = calculate_final_score(match_scores, freelancer[\"experience\"])\n",
    "    \n",
    "    print(f\"Skill Match Scores: {match_scores}\")\n",
    "    print(f\"Final Skill Match Score: {final_score}%\\n\")\n",
    "    \n",
    "    freelancer_scores.append({\n",
    "        \"name\": freelancer[\"name\"],\n",
    "        \"final_score\": final_score,\n",
    "        \"experience\": freelancer[\"experience\"]\n",
    "    })\n",
    "\n",
    "# Custom sorting: Newcomers come first (even with lower scores), followed by experienced freelancers.\n",
    "# Sorting by final score (lowest first), then by experience (newcomers first)\n",
    "freelancer_scores.sort(key=lambda x: (x[\"final_score\"], x[\"experience\"] != \"newcomer\"))\n",
    "\n",
    "print(\"Freelancer Rankings (Top to Bottom):\")\n",
    "for rank, freelancer in enumerate(freelancer_scores, 1):\n",
    "    print(f\"{rank}. {freelancer['name']} (Score: {freelancer['final_score']}%)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7cd84afb-b235-4bd2-8b8a-6b7fec76424c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
